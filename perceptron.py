# Jesse Corson
# Spencer Tubbs
# Connor Clayton
# CS 4470

import random

# wi = n(t-o)xi
#  where n is the learning rate (eg 0.1)
# t is the target output and o is the output generated by the perceptron
def ChangeInWeight(target, o, xi):
    n = 0.1
    return (n * (target - o) * xi)


def calcPerceptron(weightArray, x1, x2):
    tempVal = weightArray[0] + (weightArray[1] * x1) + (weightArray[2] * x2)
    if tempVal > 0:
        return 1
    else:
        return -1
    
def CalcWeights(targetArray, startingWeights):
    currentArray = [0,0,0,0]
    while targetArray != currentArray:
        currentArray[0] = (calcPerceptron(startingWeights, 0, 0))
        currentArray[1] = (calcPerceptron(startingWeights, 0, 1))
        currentArray[2] = (calcPerceptron(startingWeights, 1, 0))
        currentArray[3] = (calcPerceptron(startingWeights, 1, 1))
        while(currentArray[0] != targetArray[0]):
            tempVal = calcPerceptron(startingWeights, 0, 0)
            startingWeights[0] = startingWeights[0] + ChangeInWeight(targetArray[0], tempVal, 1)
            startingWeights[1] = startingWeights[1] + ChangeInWeight(targetArray[0], tempVal, 0)
            startingWeights[2] = startingWeights[2] + ChangeInWeight(targetArray[0], tempVal, 0)
            currentArray[0] = (calcPerceptron(startingWeights, 0, 0))
            currentArray[1] = (calcPerceptron(startingWeights, 0, 1))
            currentArray[2] = (calcPerceptron(startingWeights, 1, 0))
            currentArray[3] = (calcPerceptron(startingWeights, 1, 1))
        while(currentArray[1] != targetArray[1]):
            tempVal = calcPerceptron(startingWeights, 0, 1)
            startingWeights[0] = startingWeights[0] + ChangeInWeight(targetArray[1], tempVal, 1)
            startingWeights[1] = startingWeights[1] + ChangeInWeight(targetArray[1], tempVal, 0)
            startingWeights[2] = startingWeights[2] + ChangeInWeight(targetArray[1], tempVal, 1)
            currentArray[0] = (calcPerceptron(startingWeights, 0, 0))
            currentArray[1] = (calcPerceptron(startingWeights, 0, 1))
            currentArray[2] = (calcPerceptron(startingWeights, 1, 0))
            currentArray[3] = (calcPerceptron(startingWeights, 1, 1))
        while(currentArray[2] != targetArray[2]):
            tempVal = calcPerceptron(startingWeights, 1, 0)
            startingWeights[0] = startingWeights[0] + ChangeInWeight(targetArray[2], tempVal, 1)
            startingWeights[1] = startingWeights[1] + ChangeInWeight(targetArray[2], tempVal, 1)
            startingWeights[2] = startingWeights[2] + ChangeInWeight(targetArray[2], tempVal, 0)
            currentArray[0] = (calcPerceptron(startingWeights, 0, 0))
            currentArray[1] = (calcPerceptron(startingWeights, 0, 1))
            currentArray[2] = (calcPerceptron(startingWeights, 1, 0))
            currentArray[3] = (calcPerceptron(startingWeights, 1, 1))
        while(currentArray[3] != targetArray[3]):
            tempVal = calcPerceptron(startingWeights, 1, 1)
            startingWeights[0] = startingWeights[0] + ChangeInWeight(targetArray[3], tempVal, 1)
            startingWeights[1] = startingWeights[1] + ChangeInWeight(targetArray[3], tempVal, 1)
            startingWeights[2] = startingWeights[2] + ChangeInWeight(targetArray[3], tempVal, 1)
            currentArray[0] = (calcPerceptron(startingWeights, 0, 0))
            currentArray[1] = (calcPerceptron(startingWeights, 0, 1))
            currentArray[2] = (calcPerceptron(startingWeights, 1, 0))
            currentArray[3] = (calcPerceptron(startingWeights, 1, 1))
    return startingWeights

def CalcNotWeights(targetArray, startingWeights):
    currentArray = [0,0,0,0]
    while targetArray != currentArray:
        currentArray[0] = (calcPerceptron(startingWeights, 0, 0))
        currentArray[1] = (calcPerceptron(startingWeights, 0, 1))
        while(currentArray[0] != targetArray[0]):
            tempVal = calcPerceptron(startingWeights, 0, 0)
            startingWeights[0] = startingWeights[0] + ChangeInWeight(targetArray[0], tempVal, 1)
            startingWeights[1] = startingWeights[1] + ChangeInWeight(targetArray[0], tempVal, 0)
            currentArray[0] = (calcPerceptron(startingWeights, 0, 0))
            currentArray[1] = (calcPerceptron(startingWeights, 1, 0))
        while(currentArray[1] != targetArray[1]):
            tempVal = calcPerceptron(startingWeights, 1, 0)
            startingWeights[0] = startingWeights[0] + ChangeInWeight(targetArray[1], tempVal, 1)
            startingWeights[1] = startingWeights[1] + ChangeInWeight(targetArray[1], tempVal, 1)
            currentArray[0] = (calcPerceptron(startingWeights, 0, 0))
            currentArray[1] = (calcPerceptron(startingWeights, 1, 0))
    return startingWeights

def CalcXorValues(andWeights, orWeights):
    currentValues = []
    
    andValue = calcPerceptron(andWeights, 0, 0)
    if andValue == -1:
        andValue = 0
    orValue = calcPerceptron(orWeights, 0, 0)
    xorValue = orValue - (andValue * 2)
    currentValues.append(xorValue)
    
    andValue = calcPerceptron(andWeights, 0, 1)
    if andValue == -1:
        andValue = 0
    orValue = calcPerceptron(orWeights, 0, 1)
    xorValue = orValue - (andValue * 2)
    currentValues.append(xorValue)

    andValue = calcPerceptron(andWeights, 1, 0)
    if andValue == -1:
        andValue = 0
    orValue = calcPerceptron(orWeights, 1, 0)
    xorValue = orValue - (andValue * 2)
    currentValues.append(xorValue)

    andValue = calcPerceptron(andWeights, 1, 1)
    if andValue == -1:
        andValue = 0
    orValue = calcPerceptron(orWeights, 1, 1)
    xorValue = orValue - (andValue * 2)
    currentValues.append(xorValue)

    returnValues = []
    for x in currentValues:
        if x > 0:
            returnValues.append(1)
        else:
            returnValues.append(-1)
        
    return returnValues

#Program starts here
randomWeights = []
randomWeights.append(random.uniform(-1,1))
randomWeights.append(random.uniform(-1,1))
randomWeights.append(random.uniform(-1,1))

print("Random starting weight values for AND and OR:")
for x in randomWeights:
    print("%.2f" % x)
print()

# AND
targetValues = [-1,-1,-1,1]
andWeights = CalcWeights(targetValues, randomWeights).copy()
print("Final weight values for AND:")
for x in andWeights:
    print("%.2f" % x)
print("")
print("Output values for AND:")
print("(0,0) = %i" % calcPerceptron(andWeights, 0, 0))
print("(0,1) = %i" % calcPerceptron(andWeights, 0, 1))
print("(1,0) = %i" % calcPerceptron(andWeights, 1, 0))
print("(1,1) = %i" % calcPerceptron(andWeights, 1, 1))
print("")

# OR
targetValues = [-1,1,1,1]
orWeights = CalcWeights(targetValues, randomWeights).copy()
print("Final weight values for OR:")
for x in orWeights:
    print("%.2f" % x)
print("")
print("Output values for OR:")
print("(0,0) = %i" % calcPerceptron(orWeights, 0, 0))
print("(0,1) = %i" % calcPerceptron(orWeights, 0, 1))
print("(1,0) = %i" % calcPerceptron(orWeights, 1, 0))
print("(1,1) = %i" % calcPerceptron(orWeights, 1, 1))
print("")

#NOT
randomWeights = []
randomWeights.append(random.uniform(-1,1))
randomWeights.append(random.uniform(-1,1))
print("Random starting weight values for NOT:")
for x in randomWeights:
    print("%.2f" % x)
print()
randomWeights.append(0)
targetValues = [1,-1, 0, 0]
notWeights = CalcNotWeights(targetValues, randomWeights)
print("Final weight values for NOT:")
notWeights.pop()
for x in notWeights:
    print("%.2f" % x)
print("")
print("Output values for NOT:")
randomWeights.append(0)
print("(0,1) = %i" % calcPerceptron(notWeights, 0, 1))
print("(1,0) = %i" % calcPerceptron(notWeights, 1, 0))
notWeights.pop()
print("")

#XOR
xorValues = CalcXorValues(andWeights, orWeights)
print("Output values for XOR: Using OR - (AND * 2)")
print("(0,0) = %i" % xorValues[0])
print("(0,1) = %i" % xorValues[1])
print("(1,0) = %i" % xorValues[2])
print("(1,1) = %i" % xorValues[3])
print("")
